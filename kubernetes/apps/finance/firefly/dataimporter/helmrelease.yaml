---
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &appname fireflydi
spec:
  interval: 30m
  chart:
    spec:
      chart: app-template
     # version: 4.1.1
      sourceRef:
        kind: HelmRepository
        name: bjw-s
        namespace: flux-system
  install:
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
#  valuesFrom:
#   - kind: ConfigMap
#     name: firefly-helm-values
  values: 
     #enter values here for global overrides  
    controllers:
      fireflydi:
        annotations:
          reloader.stakater.com/auto: "true"
        # initContainers:
          # init-db:
            # image:
              # repository: ghcr.io/onedr0p/postgres-init
              # tag: 16
            # envFrom: &envFrom
              # - secretRef:
                  # name: radarr-secret
        containers:
          app:
            image:
              repository: fireflyiii/data-importer
              tag: version-1.5.6
            env:
              IGNORE_DUPLICATE_ERRORS: "false"
              FIREFLY_III_URL: "http://firefly:8080"
              USE_CACHE: "false"
              IGNORE_NOT_FOUND_TRANSACTIONS: "false"
              CAN_POST_AUTOIMPORT: true
              CAN_POST_FILES: true
              #JSON_CONFIGURATION_DIR: "storage/configurations"
              #CONNECTION_TIMEOUT: "31.41"
              APP_ENV: local
              APP_DEBUG: false
              LOG_CHANNEL: stack
              LOG_RETURN_JSON: false
              LOG_LEVEL: debug # debug, info, notice, warning, error, critical, alert, emergency
              BROADCAST_DRIVER: "log"
              CACHE_DRIVER: "file"
              QUEUE_CONNECTION: "sync"
              SESSION_DRIVER: "file"
              SESSION_LIFETIME: "120"
              IS_EXTERNAL: "false"
              REDIS_HOST: "127.0.0.1"
              REDIS_PASSWORD: "null" 
              REDIS_PORT: "6379"
              ASSET_URL: ""
              # always use quotes
              REDIS_DB: "0"
              REDIS_CACHE_DB: "1"
              portNum: &port 8080
              TRUSTED_PROXIES: "**"
              FALLBACK_IN_DIR: "true"
              TZ: "America/New_York"
              APP_NAME: *appname
            envFrom:
              - secretRef:
                   name: firefly-app-token
            probes:
              liveness: &probes
                enabled: true
                custom: true
                spec:
                  tcpSocket:
                    port: *port
                  initialDelaySeconds: 15
                  periodSeconds: 10
                  timeoutSeconds: 1
                  failureThreshold: 30
              readiness: *probes
            securityContext:
              allowPrivilegeEscalation: true
              readOnlyRootFilesystem: false
              runAsUser: 0
              runAsNonRoot: false
              capabilities: { add: ["CHOWN"] }
            resources:
              requests:
                cpu: 100m
                memory: 100Mi
              limits:
                memory: 4Gi
      fireflydi-cron:
        type: cronjob
        cronjob:
          schedule: "0 0 * * *"
        containers:
          fireflydi-cron:
            image: 
              repository: yauritux/busybox-curl
              tag: latest
            command:
              - "sh"
              - "-c"
              - "/import-script/script.sh"
            envFrom:
              - secretRef:
                   name: firefly-app-token
            probes:
              liveness: &probes
                enabled: false
              readiness: *probes
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: false
              capabilities: { drop: ["ALL"] }
            resources:
              requests:
                cpu: 100m
                memory: 10Mi
              limits:
                memory: 4Gi
    defaultPodOptions:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        fsGroupChangePolicy: OnRootMismatch
        seccompProfile: { type: RuntimeDefault }
    service:
      app:
        controller: fireflydi
        ports:
          http:
            port: *port
    ingress:
      app:
        className: internal
        #annotations:
        # - nginx.ingress.kubernetes.io/app-root: /firefly
        hosts:
          - host: "{{ .Release.Name }}.${SECRET_DOMAIN}"
            paths:
              - path: /
                service:
                  identifier: app
                  port: http
    persistence:
      config:
        existingClaim: fireflydi
        advancedMounts:
          fireflydi:
            app:
              - path: /config
      # scripts:
        # type: configMap
        # name: radarr-configmap
        # defaultMode: 0775
        # globalMounts:
          # - path: /scripts/pushover-notifier.sh
            # subPath: pushover-notifier.sh
            # readOnly: true
      scripted:
        type: configMap
        name: fireflydi-script
        defaultMode: 0555
        globalMounts:
          - path: /import-script
      tmp:
        type: emptyDir
        globalMounts:
          - path: /tmp
      uploads:
        type: nfs
        server: 192.168.86.9
        path: /BackedStorage/firefly
        globalMounts:
          - path: /fireflyrepo
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: fireflydi-script
data:
  script.sh: |
    #! /bin/sh
                  
    # Optional: ensure 'curl' is available (uncomment if needed)
    # apk add --no-cache curl
    # The Bash script:
    BASE_DIR=$IMPORT_DIR_ALLOWLIST
    # Loop through each subfolder
    echo "looking in Folder $BASE_DIR"
    for folder in "$BASE_DIR"/*; do
      # Check if it's a directory
      if [ -d "$folder" ]; then
        echo "Found folder $folder"
        # Check if there are .csv files
        if ls "$folder" | grep -iqe "csv$" 2>/dev/null; then
          echo "Found CSV file(s) in: $folder"

          # Make the curl request
          response=$(curl --location --request POST \
            "http://fireflydi:8080/autoimport?directory=$folder&secret=$AUTO_IMPORT_SECRET" \
            --silent --show-error)
          status=$?
          if [ $status -eq 0 ]; then
            echo "Request succeeded: $response"
          else
            echo "Request failed with status: $status and $response"
            response="Failed: $response"
          fi
           echo $response > $folder/$(date +'%b%d_%Y-import-report.txt').report.txt
           echo "Report Created $folder/$(date +'%b%d_%Y-import-report.txt')"
          # Rename all .csv files to .csv.completed
          for csv_file in "$folder"/*.[cC][sS][vV]; do
            mv "$csv_file" "$csv_file.completed"
          done
        fi
      fi
    done

