---
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: defaulterr
spec:
  interval: 30m
  chart:
    spec:
      chart: app-template
     # version: 4.1.1
      sourceRef:
        kind: HelmRepository
        name: bjw-s
        namespace: flux-system
  install:
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
#  valuesFrom:
#   - kind: ConfigMap
#     name: defaulterr-helm-values
  values:
     #enter values here for global overrides
    controllers:
      defaulterr:
        annotations:
          reloader.stakater.com/auto: "true"
        # initContainers:
          # init-db:
            # image:
              # repository: ghcr.io/onedr0p/postgres-init
              # tag: 16
            # envFrom: &envFrom
              # - secretRef:
                  # name: radarr-secret
        containers:
          app:
            image:
              repository: varthe/defaulterr
              tag: latest@sha256:7fa294016fe73dab92bbf0f76c7dc4a5f77c89c7921bcca935c90f96bdd30687
            env:
              # RADARR__APP__INSTANCENAME: Radarr
              # RADARR__APP__THEME: dark
              portNum: &port 3184
              TZ: America/New_York
              LOG_LEVEL: info
            # envFrom: *envFrom
            probes:
              liveness: &probes
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /health
                    port: *port
                  initialDelaySeconds: 15
                  periodSeconds: 10
                  timeoutSeconds: 1
                  failureThreshold: 3
              readiness: *probes
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities: { drop: ["ALL"] }
            resources:
              requests:
                cpu: 100m
                memory: 100Mi
              limits:
                memory: 4Gi
    defaultPodOptions:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        fsGroupChangePolicy: OnRootMismatch
        seccompProfile: { type: RuntimeDefault }
    service:
      app:
        controller: defaulterr
        ports:
          http:
            port: *port
    ingress:
      app:
        className: internal
        #annotations:
        #  nginx.ingress.kubernetes.io/app-root: /defaulterr
        #  external-dns.alpha.kubernetes.io/target: "external."
        #  nginx.ingress.kubernetes.io/auth-url: "http://ak-outpost-auth-knightd.authentik.svc.cluster.local:9000/outpost.goauthentik.io/auth/nginx"
        #  nginx.ingress.kubernetes.io/auth-signin: "https://sso2./outpost.goauthentik.io/start?rd=://"
        #  nginx.ingress.kubernetes.io/auth-response-headers: "Set-Cookie,X-authentik-username,X-authentik-groups,X-authentik-entitlements,X-authentik-email,X-authentik-name,X-authentik-uid"
        #  nginx.ingress.kubernetes.io/auth-snippet: |
        #  proxy_set_header X-Forwarded-Host ;
        hosts:
          - host: "defsubs.${SECRET_DOMAIN}"
            paths:
              - path: /
                service:
                  identifier: app
                  port: http
    persistence:
      #config:
        #existingClaim: defaulterr
      config-secret:
        type: secret
        name: defaulterr-config
        defaultMode: 420
        items:
          - key: config.yaml
            path: config.yaml
        globalMounts:
          - path: /config
      # scripts:
        # type: configMap
        # name: radarr-configmap
        # defaultMode: 0775
        # globalMounts:
          # - path: /scripts/pushover-notifier.sh
            # subPath: pushover-notifier.sh
            # readOnly: true
      tmp:
        type: emptyDir
        globalMounts:
          - path: /tmp
      logs:
        type: emptyDir
        globalMounts:
          - path: /logs
tas
