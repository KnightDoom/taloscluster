apiVersion: discovery.k8s.io/v1
kind: EndpointSlice
metadata:
  name: hass-endpoint
  labels:
    kubernetes.io/service-name: hass-endpoint
addressType: IPv4
endpoints:
  - addresses:
      - "192.168.86.22"
ports:
  - port: 8123
    name: main
    appProtocol: http
    protocol: TCP
  # - port: 4357
  #   name: observer
  #   appProtocol: http
  #   protocol: TCP
---
apiVersion: v1
kind: Service
metadata:
  name: hass-endpoint
spec:
  #internalTrafficPolicy: Cluster
  #ipFamilies:
  #  - IPv4
  #ipFamilyPolicy: SingleStack
  #type: ClusterIP
  ports:
    - protocol: TCP
      port: 8123
      targetPort: 8123
      name: main
    # - protocol: TCP
    #   port: 4357
    #   targetPort: 4357
    #   name: observer
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    #derp: "on"
     external-dns.alpha.kubernetes.io/target: external.${SECRET_DOMAIN}
    # nginx.ingress.kubernetes.io/auth-response-headers: Set-Cookie,X-authentik-username,X-authentik-groups,X-authentik-entitlements,X-authentik-email,X-authentik-name,X-authentik-uid
    # nginx.ingress.kubernetes.io/auth-signin: https://sso2.${SECRET_DOMAIN}/outpost.goauthentik.io/start?rd=$scheme://$http_host$escaped_request_uri
     nginx.ingress.kubernetes.io/auth-snippet: |
       proxy_set_header X-Forwarded-Host $http_host;
    # nginx.ingress.kubernetes.io/auth-url: http://ak-outpost-auth-knightd.authentik.svc.cluster.local:9000/outpost.goauthentik.io/auth/nginx
  name: hass-ingress
spec:
  ingressClassName: external
  rules:
  - host: hass.${SECRET_DOMAIN}
    http:
      paths:
      - backend:
          service:
            name: hass-endpoint
            port:
              number: 8123
        path: /
        pathType: Prefix
  # - host: observer.${SECRET_DOMAIN}
  #   http:
  #     paths:
  #     - backend:
  #         service:
  #           name: hass-endpoint
  #           port:
  #             number: 4357
  #       path: /
  #       pathType: Prefix


